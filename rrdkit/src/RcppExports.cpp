// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// p_mol2Inchi
std::string p_mol2Inchi(SEXP xp);
RcppExport SEXP rrdkit_p_mol2Inchi(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2Inchi(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_Inchi2InchiKey
std::string p_Inchi2InchiKey(SEXP x);
RcppExport SEXP rrdkit_p_Inchi2InchiKey(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(p_Inchi2InchiKey(x));
    return rcpp_result_gen;
END_RCPP
}
// Inchi2Mol
SEXP Inchi2Mol(SEXP x, bool sanitize, bool removeHs);
RcppExport SEXP rrdkit_Inchi2Mol(SEXP xSEXP, SEXP sanitizeSEXP, SEXP removeHsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type sanitize(sanitizeSEXP);
    Rcpp::traits::input_parameter< bool >::type removeHs(removeHsSEXP);
    rcpp_result_gen = Rcpp::wrap(Inchi2Mol(x, sanitize, removeHs));
    return rcpp_result_gen;
END_RCPP
}
// p_smile2mol
SEXP p_smile2mol(std::string smi, bool sanitize);
RcppExport SEXP rrdkit_p_smile2mol(SEXP smiSEXP, SEXP sanitizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type smi(smiSEXP);
    Rcpp::traits::input_parameter< bool >::type sanitize(sanitizeSEXP);
    rcpp_result_gen = Rcpp::wrap(p_smile2mol(smi, sanitize));
    return rcpp_result_gen;
END_RCPP
}
// p_smarts2mol
SEXP p_smarts2mol(std::string smarts);
RcppExport SEXP rrdkit_p_smarts2mol(SEXP smartsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type smarts(smartsSEXP);
    rcpp_result_gen = Rcpp::wrap(p_smarts2mol(smarts));
    return rcpp_result_gen;
END_RCPP
}
// p_molIsNil
bool p_molIsNil(SEXP xp);
RcppExport SEXP rrdkit_p_molIsNil(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_molIsNil(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2smiles
std::string p_mol2smiles(SEXP xp);
RcppExport SEXP rrdkit_p_mol2smiles(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2smiles(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2svg
std::string p_mol2svg(SEXP xp);
RcppExport SEXP rrdkit_p_mol2svg(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2svg(xp));
    return rcpp_result_gen;
END_RCPP
}
// mol2maccs
IntegerVector mol2maccs(SEXP xp);
RcppExport SEXP rrdkit_mol2maccs(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(mol2maccs(xp));
    return rcpp_result_gen;
END_RCPP
}
// mol2morgan
IntegerVector mol2morgan(SEXP xp, unsigned int radius, unsigned int nBits, bool useFeatures);
RcppExport SEXP rrdkit_mol2morgan(SEXP xpSEXP, SEXP radiusSEXP, SEXP nBitsSEXP, SEXP useFeaturesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nBits(nBitsSEXP);
    Rcpp::traits::input_parameter< bool >::type useFeatures(useFeaturesSEXP);
    rcpp_result_gen = Rcpp::wrap(mol2morgan(xp, radius, nBits, useFeatures));
    return rcpp_result_gen;
END_RCPP
}
// p_writeSdf
void p_writeSdf(std::string file, SEXP pv, bool setForceV3000);
RcppExport SEXP rrdkit_p_writeSdf(SEXP fileSEXP, SEXP pvSEXP, SEXP setForceV3000SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pv(pvSEXP);
    Rcpp::traits::input_parameter< bool >::type setForceV3000(setForceV3000SEXP);
    p_writeSdf(file, pv, setForceV3000);
    return R_NilValue;
END_RCPP
}
// p_molSupplier
SEXP p_molSupplier(std::string file, bool sanitize, bool removeHs, bool strictParsing);
RcppExport SEXP rrdkit_p_molSupplier(SEXP fileSEXP, SEXP sanitizeSEXP, SEXP removeHsSEXP, SEXP strictParsingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< bool >::type sanitize(sanitizeSEXP);
    Rcpp::traits::input_parameter< bool >::type removeHs(removeHsSEXP);
    Rcpp::traits::input_parameter< bool >::type strictParsing(strictParsingSEXP);
    rcpp_result_gen = Rcpp::wrap(p_molSupplier(file, sanitize, removeHs, strictParsing));
    return rcpp_result_gen;
END_RCPP
}
// p_molSupplier_atEnd
bool p_molSupplier_atEnd(SEXP xp);
RcppExport SEXP rrdkit_p_molSupplier_atEnd(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_molSupplier_atEnd(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_molSupplier_next
SEXP p_molSupplier_next(SEXP xp);
RcppExport SEXP rrdkit_p_molSupplier_next(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_molSupplier_next(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_molSupplier_reset
void p_molSupplier_reset(SEXP xp);
RcppExport SEXP rrdkit_p_molSupplier_reset(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    p_molSupplier_reset(xp);
    return R_NilValue;
END_RCPP
}
// p_molGetPropList
std::vector<std::string> p_molGetPropList(SEXP xp);
RcppExport SEXP rrdkit_p_molGetPropList(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_molGetPropList(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_molGetProp
std::string p_molGetProp(SEXP xp, SEXP property);
RcppExport SEXP rrdkit_p_molGetProp(SEXP xpSEXP, SEXP propertySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type property(propertySEXP);
    rcpp_result_gen = Rcpp::wrap(p_molGetProp(xp, property));
    return rcpp_result_gen;
END_RCPP
}
// p_molSetProp
void p_molSetProp(SEXP xp, SEXP property, SEXP key);
RcppExport SEXP rrdkit_p_molSetProp(SEXP xpSEXP, SEXP propertySEXP, SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type property(propertySEXP);
    Rcpp::traits::input_parameter< SEXP >::type key(keySEXP);
    p_molSetProp(xp, property, key);
    return R_NilValue;
END_RCPP
}
// fragmentOnBRICSBonds
SEXP fragmentOnBRICSBonds(SEXP xp);
RcppExport SEXP rrdkit_fragmentOnBRICSBonds(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(fragmentOnBRICSBonds(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_SubstructMatch
bool p_SubstructMatch(SEXP xp_mol, SEXP xp_query);
RcppExport SEXP rrdkit_p_SubstructMatch(SEXP xp_molSEXP, SEXP xp_querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_mol(xp_molSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_query(xp_querySEXP);
    rcpp_result_gen = Rcpp::wrap(p_SubstructMatch(xp_mol, xp_query));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2mw
double p_mol2mw(SEXP xp);
RcppExport SEXP rrdkit_p_mol2mw(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2mw(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2TPSA
double p_mol2TPSA(SEXP xp);
RcppExport SEXP rrdkit_p_mol2TPSA(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2TPSA(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2NumRotatableBonds
double p_mol2NumRotatableBonds(SEXP xp);
RcppExport SEXP rrdkit_p_mol2NumRotatableBonds(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2NumRotatableBonds(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2NumHBA
double p_mol2NumHBA(SEXP xp);
RcppExport SEXP rrdkit_p_mol2NumHBA(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2NumHBA(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2NumHBD
double p_mol2NumHBD(SEXP xp);
RcppExport SEXP rrdkit_p_mol2NumHBD(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2NumHBD(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2LogP
double p_mol2LogP(SEXP xp);
RcppExport SEXP rrdkit_p_mol2LogP(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2LogP(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_mol2murcko
std::string p_mol2murcko(SEXP xp);
RcppExport SEXP rrdkit_p_mol2murcko(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_mol2murcko(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_computeGasteigerCharges
std::vector< double > p_computeGasteigerCharges(SEXP xp);
RcppExport SEXP rrdkit_p_computeGasteigerCharges(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_computeGasteigerCharges(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_kekulize
void p_kekulize(SEXP xp, bool markAtomsBonds, unsigned int maxBackTracks);
RcppExport SEXP rrdkit_p_kekulize(SEXP xpSEXP, SEXP markAtomsBondsSEXP, SEXP maxBackTracksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type markAtomsBonds(markAtomsBondsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxBackTracks(maxBackTracksSEXP);
    p_kekulize(xp, markAtomsBonds, maxBackTracks);
    return R_NilValue;
END_RCPP
}
// p_molCompute2DCoords
void p_molCompute2DCoords(SEXP xp);
RcppExport SEXP rrdkit_p_molCompute2DCoords(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    p_molCompute2DCoords(xp);
    return R_NilValue;
END_RCPP
}
